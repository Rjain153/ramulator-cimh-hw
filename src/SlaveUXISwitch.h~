#ifndef __SLAVEUXISWITCH_H
#define __SLAVEUXISWITCH_H

#include <list>
#include <deque>
#include <string>
#include <vector>
#include <map>

#include "Request.h"
//#include "MemoryController.h"
#include "Controller.h"

using namespace std;

namespace ramulator {

template <typename T>
class SlaveUXISwitch {
    /* Member variables */
 private:


 public:
    long clk = 0;

    bool print_cmd_trace = false;
    bool record_cmd_trace = false;

    //map<int,MemoryController*> memoryControllers;
    vector<Controller<T>*> memoryControllers;
    //map<int, Controller<T>*> memoryControllers;
    

    SlaveUXISwitch() {
      // @rajat: Constructor logic, object set-up
      
    }
    
    ~SlaveUXISwitch() {
      // @rajat: Handle the object deletion
      for (auto ctrl: memoryControllers)
	delete ctrl;
    }

    bool enqueue(Request& req) {
      if( memoryControllers[req.addr_vec[int(T::Level::Channel)]]->enqueue(req)) {
	cout << "request enqueued to controller " << req.addr_vec[int(T::Level::Channel)] << endl;
	return true;
      }
      return false;
    }

    void tick() {
      clk++;

      //@rajat: Fill in the logic
      // Handle the processing of an NMP request if pending
      for( auto ctrl: memoryControllers) {
	ctrl->tick();
      }
    }

    void finish() {
      // @rajat: Fill in the logic
    }

  };/*class SlaveUXISwitch*/
  


  
}  /*namespace ramulator*/
#endif /*__SLAVEUXISWITCH_H*/
